<span class="map-container">
  <div id='map'></div>
  <div id='features'>
  </span>

  <% @itinerary.locations.each do |location| %>

<div class="maze-sections">

  <div id="steps"></div>
  
  <section id='<%= location.title %>' class='active'>
    <h2 class="maze-header"><%= location.title %> 
    <% if location.icon.present? %>
      <%= image_tag location.icon, width: '25px' %>
    <% end %>
      </h2>
    
    <% if location.address.present? %>
      <p class="address-text"><%= location.address %></p>
    <% end %>
    </p>
    <hr class="section-divide">
    <p><%= location.description %></p>


    <div>  <% if location.website.present? %>
      <%= link_to "Website", location.website, class: 'btn btn-warning btn-rounded' %>
      <% end %>

    </div>

    <div> <% if location.photo.present? %>
     <%= image_tag location.photo, width: '500px', class: "maze-photos" %>
     <% end %>

   </div>
      
      
    </section>
</div>

  <% end %>
</div>


<div class="fixed-action-btn" style="bottom: 60px; right: 24px;">
  <a class="btn-floating btn-lg red" href="<%= maze_intro_path %>">
    <%= fa_icon "arrow-left" %>
  </a>
</div>


<script>

  mapboxgl.accessToken = 'pk.eyJ1Ijoia2V2aW5zY2hhZmZ0ZXIiLCJhIjoiY2piNnNkMmQ2OTBiZzMzcnpzM252OGttdSJ9.vp7HQwPNr--uNONxICdJzg';

  var map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/mapbox/streets-v9',
    center: [<%= (@itinerary.locations.first.longitude).to_f %>, <%= (@itinerary.locations.first.latitude).to_f %>],
    zoom: 18,
    bearing: 1,
    pitch: 100
  });

  // Adds route layer to map

  map.on('load', function() {

    getRoute();

    var layers = map.getStyle().layers;

    var labelLayerId;
    for (var i = 0; i < layers.length; i++) {
        if (layers[i].type === 'symbol' && layers[i].layout['text-field']) {
            labelLayerId = layers[i].id;
            break;
        }
    }

    map.addLayer({
            'id': '3d-buildings',
            'source': 'composite',
            'source-layer': 'building',
            'filter': ['==', 'extrude', 'true'],
            'type': 'fill-extrusion',
            'minzoom': 15,
            'paint': {
                'fill-extrusion-color': '#aaa',

                // use an 'interpolate' expression to add a smooth transition effect to the
                // buildings as the user zooms in
                'fill-extrusion-height': [
                    "interpolate", ["linear"], ["zoom"],
                    15, 0,
                    15.05, ["get", "height"]
                ],
                'fill-extrusion-base': [
                    "interpolate", ["linear"], ["zoom"],
                    15, 0,
                    15.05, ["get", "min_height"]
                ],
                'fill-extrusion-opacity': .6
            }
        }, labelLayerId);


    });



  function getRoute() {

    var start = [<%= (@itinerary.locations.first.longitude).to_f %>, <%= (@itinerary.locations.first.latitude).to_f %>];
    var end = [<%= (@itinerary.locations.last.longitude).to_f %>, <%= (@itinerary.locations.last.latitude).to_f %>];
    

    var directionsRequest = 'https://api.mapbox.com/optimized-trips/v1/mapbox/walking/' + 
    <% location_size = @itinerary.locations.size %>
    <% @itinerary.locations.each_with_index do |location, ix| %>
    '<%=location.longitude%>' + ',' + '<%=location.latitude%><%= (ix + 1 == location_size) ? "" : ";" %>' + 
    <% end %>  '?geometries=geojson' + '&steps=true&source=first&destination=last' + '&access_token=' + mapboxgl.accessToken;

    console.log(directionsRequest)
    

    $.ajax({
      method: 'GET',
      url: directionsRequest,
    }).done(function(data) {
      var route = data.trips[0].geometry.coordinates;
      var steps = Math.ceil(data.trips[0].distance)

      $('#steps').append(`<h1 class="steps-number"> ${steps} Steps </h1>`);

      console.log(steps)
      
        map.addLayer({
          "id": "route",
          "type": "line",
          "source": {
            "type": "geojson",
            "data": {
              "type": "Feature",
              "properties": {},
              "geometry": {
                "type": "LineString",
                "coordinates": route
              }
            }
          },
          "layout": {
            "line-join": "round",
            "line-cap": "round"
          },
          "paint": {
            "line-color": "#3498db",
            "line-width": 9
          }
        });
      });
      
      map.addLayer({
        id: 'start',
        type: 'circle',
        source: {
          type: 'geojson',
          data: {
            type: 'Feature',
            geometry: {
              type: 'Point',
              coordinates: start
            }
          }
        }
      });

      map.addLayer({
        id: 'end',
        type: 'circle',
        source: {
          type: 'geojson',
          data: {
            type: 'Feature',
            geometry: {
              type: 'Point',
              coordinates: end
            }
          }
        }
      });
  }


  var chapters = {

    <% @itinerary.locations.each do |location| %>


    '<%= location.title %>': {
      bearing: 27,
      center: [<%= location.longitude.to_f %>, <%= location.latitude.to_f %>],
      zoom: 18,
      pitch: 100
    },

    <% end %>
  };



// On every scroll event, check which element is on screen
window.onscroll = function() {
  var chapterNames = Object.keys(chapters);
  for (var i = 0; i < chapterNames.length; i++) {
    var chapterName = chapterNames[i];
    if (isElementOnScreen(chapterName)) {
      setActiveChapter(chapterName);
      break;
    }
  }
};

var activeChapterName = 'baker';
function setActiveChapter(chapterName) {
  if (chapterName === activeChapterName) return;

  map.flyTo(chapters[chapterName]);

  document.getElementById(chapterName).setAttribute('class', 'active');
  document.getElementById(activeChapterName).setAttribute('class', '');

  activeChapterName = chapterName;
}

function isElementOnScreen(id) {
  var element = document.getElementById(id);
  var bounds = element.getBoundingClientRect();
  return bounds.top < window.innerHeight && bounds.bottom > 0;
}

</script>
