<span class="map-container">
  <div id='map'></div>
  <div id='features'>
    <p>
      <strong>Route Name:</strong>
      <%= @itinerary.description %>
    </p>
  </span>

  <% @itinerary.locations.each do |location| %>


  <section id='<%= location.title %>' class='active'>
    <h3><%= location.title %></h3>
    <p><%= location.description %></p>
    <p>[<%= (@itinerary.locations.first.latitude).to_f %>, <%= (@itinerary.locations.first.longitude).to_f %> ]</p>
  </section>
  <% end %>

  <head>
  <style>
  .accordion {
      background-color: #eee;
      color: #444;
      cursor: pointer;
      padding: 18px;
      width: 100%;
      border: none;
      text-align: left;
      outline: none;
      font-size: 15px;
      transition: 0.4s;
  }

  .active, .accordion:hover {
      background-color: #ccc;
  }

  .panel {
      padding: 0 18px;
      display: none;
      background-color: white;
  }
  </style>
  </head>
  <body>

    <h3>Reviews</h3>
    <p><%= 'no reviews yet' if @itinerary.reviews.empty? %></p>
    <% @itinerary.reviews.each do |review| %>
      <p>
        <%= review.comment %>
        <br>
        Added on: <%= review.created_at %>
      </p>
    <% end %>

  <button class="accordion">New Review</button>

  <div class="panel">
    <p>
      <div class="review_form">

      <div class="form_buttons">
        <%# submit_tag("Add") %>
        <p> hello</p>
      </div>
      <!-- troubleshooting here -->
      <%= render "reviews/form" %>
    </div>
   </p>
  </div>


  <script>
  var acc = document.getElementsByClassName("accordion");
  var i;

  for (i = 0; i < acc.length; i++) {
      acc[i].addEventListener("click", function() {
          this.classList.toggle("active");
          var panel = this.nextElementSibling;
          if (panel.style.display === "block") {
              panel.style.display = "none";
          } else {
              panel.style.display = "block";
          }
      });
  }
  </script>

  </body>


<script>

  mapboxgl.accessToken = 'pk.eyJ1Ijoia2V2aW5zY2hhZmZ0ZXIiLCJhIjoiY2piNnNkMmQ2OTBiZzMzcnpzM252OGttdSJ9.vp7HQwPNr--uNONxICdJzg';

  var map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/mapbox/streets-v9',
    center: [<%= (@itinerary.locations.first.longitude).to_f %>, <%= (@itinerary.locations.first.latitude).to_f %>],
    zoom: 15.5,
    bearing: 27,
    pitch: 45
  });

  // Adds route layer to map

  map.on('load', function() {
    getRoute();
  });

  function getRoute() {
    var start = [<%= (@itinerary.locations.first.longitude).to_f %>, <%= (@itinerary.locations.first.latitude).to_f %>];
    var end = [<%= (@itinerary.locations.last.longitude).to_f %>, <%= (@itinerary.locations.last.latitude).to_f %>];
    var directionsRequest = 'https://api.mapbox.com/directions/v5/mapbox/walking/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?geometries=geojson&access_token=' + mapboxgl.accessToken;
    $.ajax({
      method: 'GET',
      url: directionsRequest,
    }).done(function(data) {
      var route = data.routes[0].geometry;
      map.addLayer({
        id: 'route',
        type: 'line',
        source: {
          type: 'geojson',
          data: {
            type: 'Feature',
            geometry: route
          }
        },
        paint: {
          'line-width': 2
        }
      });
      map.addLayer({
        id: 'start',
        type: 'circle',
        source: {
          type: 'geojson',
          data: {
            type: 'Feature',
            geometry: {
              type: 'Point',
              coordinates: start
            }
          }
        }
      });
      map.addLayer({
        id: 'end',
        type: 'circle',
        source: {
          type: 'geojson',
          data: {
            type: 'Feature',
            geometry: {
              type: 'Point',
              coordinates: end
            }
          }
        }
      });
    });
  }


  var chapters = {

    <% @itinerary.locations.each do |location| %>


    '<%= location.title %>': {
      bearing: 27,
      center: [<%= location.longitude.to_f %>, <%= location.latitude.to_f %>],
      zoom: 15.5,
      pitch: 20
    },

    <% end %>
  };



// On every scroll event, check which element is on screen
window.onscroll = function() {
  var chapterNames = Object.keys(chapters);
  for (var i = 0; i < chapterNames.length; i++) {
    var chapterName = chapterNames[i];
    if (isElementOnScreen(chapterName)) {
      setActiveChapter(chapterName);
      break;
    }
  }
};

var activeChapterName = 'baker';
function setActiveChapter(chapterName) {
  if (chapterName === activeChapterName) return;

  map.flyTo(chapters[chapterName]);

  document.getElementById(chapterName).setAttribute('class', 'active');
  document.getElementById(activeChapterName).setAttribute('class', '');

  activeChapterName = chapterName;
}

function isElementOnScreen(id) {
  var element = document.getElementById(id);
  var bounds = element.getBoundingClientRect();
  return bounds.top < window.innerHeight && bounds.bottom > 0;
}

</script>
